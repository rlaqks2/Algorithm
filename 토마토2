#include <iostream>
#include <queue>
#include <algorithm>
//#pragma warning (disable: 4996)

#define max 1001
using namespace std;

int matrix[max][max];
bool visited[max][max];

int dx[] = { 1,0,-1,0 };
int dy[] = { 0,-1,0,1 };
int Count = 0;
int n, m;//세로, 가로

int bfs(queue<pair<int, int>> q) {
	int result = 0;


	while (!q.empty()) {//숫자 1로 채워질때까지 반복
		int new_x = q.front().first;//pop 하기 전의 x값
		int new_y = q.front().second;//pop 하기 전의 y값
		q.pop();

		for (int i = 0; i < 4; i++) {
			//인접한 값 x,y 설정
			int nx = new_x + dx[i];
			int ny = new_y + dy[i];

			if (nx == m || nx == -1 || ny == n || ny == -1) continue;

			if (matrix[nx][ny] == 0) {
				matrix[nx][ny] = matrix[new_x][new_y] + 1;
				result = matrix[nx][ny]-1;//최단거리 계산
				q.push(make_pair(nx, ny));//push
				Count++; 
			}

		}
	}
	return result;
}



int main() {

	int result = 0;
	int count = 0; // 0의 갯수
	queue<pair<int, int>> q;
	cin >> n >> m;// 세로, 가로 입력

	for (int i = 0; i < m; i++) {
		for (int j = 0; j < n; j++) {
			//scanf("%1d", &matrix[i][j]);
			cin >> matrix[i][j];
			if (matrix[i][j] == 0) count++;//0의 갯수 파악
		}
	}//input 

	for (int i = 0; i < m; i++) {
		for (int j = 0; j < n; j++) {
			if (matrix[i][j] == 1) {//dfs를 통해 최소 날짜 확인
				q.push(make_pair(i, j));//push
			}
		}
	}


	result = bfs(q);



	if (count == Count) {
		cout << result << endl;
	}
	else {
		cout << "-1" << endl;
	}
	

	return 0;
}
